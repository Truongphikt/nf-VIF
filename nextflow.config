/*
 * -------------------------------------------------
 *  nf-core/mypipeline Nextflow config file
 * -------------------------------------------------
 * Default config options for all environments.
 * Cluster-specific config options should be saved
 * in the conf folder and imported under a profile
 * name here.
 */

manifest {
  name = 'HPV'
  author = 'Marc Deloger, Sonia Lameiras, Nicolas Servant'
  homePage = 'https://gitlab.com/data-analysis/illumina-hpv'
  description = 'Genoytyping of HPV virus in Illumina capture experiments'
  mainScript = 'main.nf'
  nextflowVersion = '>=0.32.0'
  version = '1.1.2'
}

// Global default params, used in configs
params {
  container = ''
  help = false 

  // Workflow flags
  readPaths = null
  reads = null
  samplePlan = null

  name = false
  genome = false
  fastaHpv = false
  saveReference = false
  saveAlignedIntermediates = false
  outdir = './results'
  singleEnd = false
  //nbGeno = 3
  minFreqGeno = 0.1
  minMapq = 0
  minLen = 20

  // default options
  metadata = false
  queue = false
  tracedir = "${params.outdir}/pipeline_info"
  email = false
  plaintext_email = false
  skipTrimming = false
  skipFastqc = false
  skipBlat = false
  skipMultiqc = false
  splitReport = false
  multiqcConfig = "$baseDir/assets/multiqc_config.yaml"
}

/*
 * Configs and profiles
 */

// Additional configs
includeConfig 'conf/base.config'
includeConfig 'conf/genomes.config'
includeConfig 'conf/tools.config'

// Profiles
profiles {
  conda {
    process.conda = "$baseDir/environment.yml"
  }
  docker {
    docker.enabled = true
    includeConfig 'conf/containers.config'
  }
  singularity {
    singularity.enabled = true
    singularity.autoMounts = true
    includeConfig 'conf/containers.config'
  }
  toolsPath {
    includeConfig 'conf/tools-path.config'
  }
  cluster {
    includeConfig 'conf/cluster.config'
  }
  test {
    includeConfig 'conf/test.config'
  }
  gcloud {
    includeConfig 'conf/gcloud.config'
  }
}


// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

// Metrics files
timeline {
  enabled = true
  file = "${params.tracedir}/timeline.html"
}
report {
  enabled = true
  file = "${params.tracedir}/report.html"
}
trace {
  enabled = true
  file = "${params.tracedir}/trace.txt"
}
dag {
  enabled = true
  file = "${params.tracedir}/DAG.png"
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
  if(type == 'memory'){
    try {
      if(obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'time'){
    try {
      if(obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'cpus'){
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}
